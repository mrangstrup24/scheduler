import{o as p,c as v,u as S,F as q,r as D,t as b,a as w,d as F}from"./index-2e600749.js";const U=w("h1",null," Export ",-1),V={key:0},W=w("br",null,null,-1),H={key:1},z={__name:"Export",setup(R){class k{constructor(c,s,t){this.name=c,this.subject=s,this.possible_times=t}}class B{constructor(c,s){this.supervisor=c,this.grade=s,this.subjectCount=JSON.parse(JSON.stringify(O))}}const g=[],O={},f=[],m={},d=[],h=[],l={consecutive:{},wholeGrade:{}};function G(e){let c=e.length,s;for(;c!=0;)s=Math.floor(Math.random()*c),c--,[e[c],e[s]]=[e[s],e[c]];return e}var u=!1,C=!1,N=!1,E=!1,_="";const L=()=>{let e=[];f.forEach(t=>{e[t]={},d.forEach(o=>{e[t][o.name]=[]})});const c=G(JSON.parse(JSON.stringify(f)));u=!1;for(let t=1;t<=5;t++){var s=JSON.parse(JSON.stringify(O));g.forEach(o=>{l.wholeGrade[o]>s[o]&&d.forEach(n=>{n.subject.includes(o)&&c.forEach(r=>{C=!1,h.forEach(i=>{i.grade==t&&l.wholeGrade[o]>s[o]&&(e[r][n.name].every(a=>h[h.findIndex(M=>M.supervisor==a)].grade==t)||e[r][n.name].length==0)&&(e[r][n.name].push(i.supervisor),i.subjectCount[o]++,C=!0)}),C&&s[o]++})})})}for(let t=1;t<=5;t++)g.forEach(o=>{l.consecutive[o].count>0&&d.forEach(n=>{n.subject.includes(o)&&h.forEach(r=>{c.forEach(i=>{u=!0;for(let a=0;a<l.consecutive[o].length;a++)(f[f.indexOf(i)+a]==null||e[f[f.indexOf(i)+a]][n.name].length!=0||i.substring(0,2)!=f[f.indexOf(i)+a].substring(0,2))&&(u=!1);if(d.forEach(a=>{e[i][a.name].includes(r.supervisor)&&(u=!1)}),r.subjectCount[o]<l.consecutive[o].count*l.consecutive[o].length&&u)for(let a=0;a<l.consecutive[o].length;a++)e[f[f.indexOf(i)+a]][n.name].push(r.supervisor),r.subjectCount[o]++}),r.subjectCount[o]-l.wholeGrade[o]!=l.consecutive[o].count*l.consecutive[o].length&&(E=!0,_="Was unable to randomly fill consecutive classes into time points! Try to reduce consecutive class length or generate again.")})})});if(E)return{status:0,data:_};for(let t=1;t<=5;t++)return g.forEach(o=>{d.forEach(n=>{n.subject.includes(o)&&h.forEach(r=>{console.log(JSON.stringify(m)),r.subjectCount[o]<m[o]&&(N=!1,c.forEach(i=>{N||(u=!0,e[i][n.name].length!=0&&(u=!1),d.forEach(a=>{e[i][a.name].includes(r.supervisor)&&(u=!1)}),u&&(e[i][n.name].push(r.supervisor),r.subjectCount[o]++),r.subjectCount[o]>=m[o]&&(N=!0))}))})})}),g.forEach(o=>{h.forEach(n=>{console.log(n.subjectCount[o]),console.log(m[o]),n.subjectCount[o]!=m[o]&&(console.log("Problem:"),E=!0,_="Was unable to randomly fill individual classes into time points! Try to add more teachers, reduce required classes, reduce homeroom classes, or generate again.")})}),E?{status:0,data:_}:{status:1,data:e}},T=JSON.parse(localStorage.getItem("subjects")),J=JSON.parse(localStorage.getItem("timetable")),y=JSON.parse(localStorage.getItem("teachers")),I=JSON.parse(localStorage.getItem("homerooms"));T?T.forEach(e=>{g.push(e.subject),m[e.subject]=e.options.minimumRequired,l.consecutive[e.subject]={count:e.options.consecutiveClassesCount,length:e.options.consecutiveClassesLength},l.wholeGrade[e.subject]=e.options.wholeGrade}):console.log("error 1"),g.forEach(e=>O[e]=0),J?J.forEach(e=>{f.push(e.timePoint)}):console.log("error 1"),y?y.forEach(e=>{d.push(new k(e.teacher,e.options.subjectsTaught,""))}):console.log("error 2"),I?I.forEach(e=>{h.push(new B(e.homeroom,e.options.grade,{}))}):console.log("error 3");const x=L();return(e,c)=>(p(),v("main",null,[U,S(x).status==1?(p(),v("div",V,[(p(!0),v(q,null,D(S(J),s=>(p(),v("code",{key:s.id},[F(b(s.timePoint+": "+JSON.stringify(S(x).data[s.timePoint]))+" ",1),W]))),128))])):(p(),v("p",H,b(S(x).data),1))]))}};export{z as default};
